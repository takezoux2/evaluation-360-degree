datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isRetired Boolean @default(false)

  password Password?

  SnsLink              SnsLink?
  roles                Role[]
  Job                  Job                   @relation(fields: [jobId], references: [id])
  jobId                Int
  evaluations          Evaluation[]          @relation("Evaluators")
  receivedEvaluations  Evaluation[]          @relation("Evaluatees")
  ExamAnswer           ExamAnswer[]
  PersonalTermOverride PersonalTermOverride[]
}


model Password {
  id   Int    @id @default(autoincrement())
  hash String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model Sns {
  id   Int    @id @default(autoincrement())
  name String @unique

  credential String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  snsLinks SnsLink[]
}

model SnsLink {
  id Int @id @default(autoincrement())

  snsUserId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique
  Sns    Sns  @relation(fields: [snsId], references: [id])
  snsId  Int  @unique
}

model Job {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  askItems AskItem[]
}

model Term {
  id   Int    @id @default(autoincrement())
  name String @unique

  explanationMarkdown String @db.Text

  startAt DateTime
  endAt   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  askSections          AskSection[]
  evalustions          Evaluation[]
  Examination          Examination[]
  PersonalTermOverride PersonalTermOverride[]
}

model AskSection {
  id    Int    @id @default(autoincrement())
  label String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  askItems AskItem[]
  term     Term      @relation(fields: [termId], references: [id])
  termId   Int

  answerSelectionSet   AnswerSelectionSet @relation(fields: [answerSelectionSetId], references: [id])
  answerSelectionSetId Int
}

model AnswerSelectionSet {
  id   Int    @id @default(autoincrement())
  name String

  explanation String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answerSelections AnswerSelection[]
  askSections      AskSection[]
}

model AnswerSelection {
  id                   Int                @id @default(autoincrement())
  label                String
  value                Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  answerSelectionSet   AnswerSelectionSet @relation(fields: [answerSelectionSetId], references: [id])
  answerSelectionSetId Int
}

model AskItem {
  id         Int    @id @default(autoincrement())
  askText    String
  difficulty Int    @default(0)

  ordering Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  targetJobs   Job[]
  answerItems  AnswerItem[]
  askSection   AskSection   @relation(fields: [askSectionId], references: [id])
  askSectionId Int
}

model Evaluation {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  term        Term @relation(fields: [termId], references: [id])
  termId      Int
  evaluator   User @relation("Evaluators", fields: [evaluatorId], references: [id])
  evaluatorId Int
  evaluatee   User @relation("Evaluatees", fields: [evaluateeId], references: [id])
  evaluateeId Int

  answerItems AnswerItem[]

  @@unique([termId, evaluatorId, evaluateeId])
}

model AnswerItem {
  id           Int     @id @default(autoincrement())
  value        Int
  noConfidence Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  askItem   AskItem @relation(fields: [askItemId], references: [id])
  askItemId Int

  evaluation   Evaluation? @relation(fields: [evaluationId], references: [id])
  evaluationId Int?

  @@unique([askItemId, evaluationId])
}

// 試験

model Examination {
  id   Int    @id @default(autoincrement())
  name String @unique

  // 回答開始からの制限時間(分)
  timeLimitInMinutes Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  term   Term @relation(fields: [termId], references: [id])
  termId Int

  examQuestions ExamQuestion[]
  ExamAnswer    ExamAnswer[]
}

model ExamQuestion {
  id        Int    @id @default(autoincrement())
  text      String @db.Text
  imagePath String
  score     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  examination            Examination             @relation(fields: [examinationId], references: [id])
  examinationId          Int
  examQuestionSelections ExamQuestionSelection[]
  ExamAnswerItem         ExamAnswerItem[]
}

model ExamQuestionSelection {
  id              Int     @id @default(autoincrement())
  label           String
  isCorrectAnswer Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  examQuestion   ExamQuestion     @relation(fields: [examQuestionId], references: [id])
  examQuestionId Int
  examAnswerItem ExamAnswerItem[]
}

model ExamAnswer {
  id Int @id @default(autoincrement())

  // 回答開始時間
  startedAt DateTime
  // 回答制限時間
  endedAt   DateTime

  isCheater Boolean

  // 回答完了時間
  finishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  examination   Examination @relation(fields: [examinationId], references: [id])
  examinationId Int

  examAnswerItem ExamAnswerItem[]
  examCheatLog   ExamCheatLog[]

  @@unique([userId, examinationId])
}

model ExamAnswerItem {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  examAnswer   ExamAnswer @relation(fields: [examAnswerId], references: [id])
  examAnswerId Int

  examQuestion   ExamQuestion @relation(fields: [examQuestionId], references: [id])
  examQuestionId Int

  examQuestionSelection   ExamQuestionSelection @relation(fields: [examQuestionSelectionId], references: [id])
  examQuestionSelectionId Int

  @@unique([examAnswerId, examQuestionId])
}

model ExamCheatLog {
  id        Int      @id @default(autoincrement())
  cheatType String
  message   String   @db.Text
  createdAt DateTime @default(now())

  examAnswer   ExamAnswer @relation(fields: [examAnswerId], references: [id])
  examAnswerId Int
}

//  個人の期間の上書き設定
model PersonalTermOverride {
  id Int @id @default(autoincrement())

  // Termの終了時間
  endAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  term   Term @relation(fields: [termId], references: [id])
  termId Int

  @@unique([userId, termId])

}

// drop database evaluation360degree;
// create database evaluation360degree;
